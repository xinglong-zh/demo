{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/_full.js","webpack:///./node_modules/rbush/index.js","webpack:///./node_modules/quickselect/quickselect.js","webpack:///./src/plugin/leaflet.canvas-markers.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,YAAY,mBAAO,CAAC,CAAO;AAC3B,cAAc,mBAAO,CAAC,CAAiC;;AAEvD;AACA;;;;;;;;ACJa;;AAEb;AACA;;AAEA,kBAAkB,mBAAO,CAAC,CAAa;;AAEvC;AACA;;AAEA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mDAAmD,SAAS;;AAE5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mDAAmD,SAAS;;AAE5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;;AAEA,aAAa,mBAAmB;AAChC;AACA;AACA;;AAEA,aAAa,kBAAkB;AAC/B;;AAEA;AACA,KAAK;;AAEL,6BAA6B,aAAa,EAAE;;AAE5C;AACA;;AAEA,yBAAyB,kBAAkB,EAAE;;AAE7C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,sBAAsB,YAAY;;AAElC;;AAEA;;AAEA,uBAAuB,aAAa;;AAEpC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA,KAAK;;AAEL;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;;AAEA,iBAAiB;;AAEjB,aAAa;AACb;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,gDAAgD;;AAEhD;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,OAAO;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,wBAAwB;AACxD,gCAAgC,wBAAwB;;AAExD,wBAAwB,8CAA8C;AACtE,wBAAwB,8CAA8C;;AAEtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACjjBA;AACA,CAAC,KAA4D;AAC7D,CAAC,SACgC;AACjC,CAAC,qBAAqB;;AAEtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;AC9DY;;AAEb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,4CAA4C,qCAAqC;;AAEjF;;AAEA;;AAEA;;AAEA;AACA;;AAEA,sEAAsE,sBAAsB,EAAE;AAC9F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sEAAsE,sBAAsB,EAAE;AAC9F;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA","file":"leaflet.canvas-markers.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var rbush = require(\"rbush\");\r\nvar factory = require(\"./plugin/leaflet.canvas-markers\");\r\n\r\nwindow.L.CanvasIconLayer = factory(L);\r\nwindow.rbush = rbush;\r\n","'use strict';\n\nmodule.exports = rbush;\nmodule.exports.default = rbush;\n\nvar quickselect = require('quickselect');\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.quickselect = factory());\n}(this, (function () { 'use strict';\n\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nreturn quickselect;\n\n})));\n","'use strict';\r\n\r\nfunction layerFactory(L) {\r\n\r\n    var CanvasIconLayer = (L.Layer ? L.Layer : L.Class).extend({\r\n\r\n        //Add event listeners to initialized section.\r\n        initialize: function (options) {\r\n\r\n            L.setOptions(this, options);\r\n            this._onClickListeners = [];\r\n            this._onHoverListeners = [];\r\n        },\r\n\r\n        setOptions: function (options) {\r\n\r\n            L.setOptions(this, options);\r\n            return this.redraw();\r\n        },\r\n\r\n        redraw: function () {\r\n\r\n            this._redraw(true);\r\n        },\r\n\r\n        //Multiple layers at a time for rBush performance\r\n        addMarkers: function (markers) {\r\n\r\n            var self = this;\r\n            var tmpMark = [];\r\n            var tmpLatLng = [];\r\n\r\n            markers.forEach(function (marker) {\r\n\r\n                if (!((marker.options.pane == 'markerPane') && marker.options.icon))\r\n                {\r\n                    console.error('Layer isn\\'t a marker');\r\n                    return;\r\n                }\r\n\r\n                var latlng = marker.getLatLng();\r\n                var isDisplaying = self._map.getBounds().contains(latlng);\r\n                var s = self._addMarker(marker,latlng,isDisplaying);\r\n\r\n                //Only add to Point Lookup if we are on map\r\n                if (isDisplaying ===true) tmpMark.push(s[0]);\r\n\r\n                tmpLatLng.push(s[1]);\r\n            });\r\n\r\n            self._markers.load(tmpMark);\r\n            self._latlngMarkers.load(tmpLatLng);\r\n        },\r\n\r\n        //Adds single layer at a time. Less efficient for rBush\r\n        addMarker: function (marker) {\r\n\r\n            var self = this;\r\n            var latlng = marker.getLatLng();\r\n            var isDisplaying = self._map.getBounds().contains(latlng);\r\n            var dat = self._addMarker(marker,latlng,isDisplaying);\r\n\r\n            //Only add to Point Lookup if we are on map\r\n            if(isDisplaying ===true) self._markers.insert(dat[0]);\r\n\r\n            self._latlngMarkers.insert(dat[1]);\r\n        },\r\n\r\n        addLayer: function (layer) {\r\n\r\n            if ((layer.options.pane == 'markerPane') && layer.options.icon) this.addMarker(layer);\r\n            else console.error('Layer isn\\'t a marker');\r\n        },\r\n\r\n        addLayers: function (layers) {\r\n\r\n            this.addMarkers(layers);\r\n        },\r\n\r\n        removeLayer: function (layer) {\r\n\r\n            this.removeMarker(layer,true);\r\n        },\r\n\r\n        removeMarker: function (marker,redraw) {\r\n\r\n            var self = this;\r\n\r\n            //If we are removed point\r\n            if(marker[\"minX\"]) marker = marker.data;\r\n\r\n            var latlng = marker.getLatLng();\r\n            var isDisplaying = self._map.getBounds().contains(latlng);\r\n\r\n            var markerData = {\r\n\r\n                minX: latlng.lng,\r\n                minY: latlng.lat,\r\n                maxX: latlng.lng,\r\n                maxY: latlng.lat,\r\n                data: marker\r\n            };\r\n\r\n            self._latlngMarkers.remove(markerData, function (a,b) {\r\n\r\n                return a.data._leaflet_id ===b.data._leaflet_id;\r\n            });\r\n\r\n            self._latlngMarkers.total--;\r\n            self._latlngMarkers.dirty++;\r\n\r\n            if(isDisplaying ===true && redraw ===true) {\r\n\r\n                self._redraw(true);\r\n            }\r\n        },\r\n\r\n        onAdd: function (map) {\r\n\r\n            this._map = map;\r\n\r\n            if (!this._canvas) this._initCanvas();\r\n\r\n            if (this.options.pane) this.getPane().appendChild(this._canvas);\r\n            else map._panes.overlayPane.appendChild(this._canvas);\r\n\r\n            map.on('moveend', this._reset, this);\r\n            map.on('resize',this._reset,this);\r\n\r\n            map.on('click', this._executeListeners, this);\r\n            map.on('mousemove', this._executeListeners, this);\r\n        },\r\n\r\n        onRemove: function (map) {\r\n\r\n            if (this.options.pane) this.getPane().removeChild(this._canvas);\r\n            else map.getPanes().overlayPane.removeChild(this._canvas);\r\n\r\n            map.off('click', this._executeListeners, this);\r\n            map.off('mousemove', this._executeListeners, this);\r\n\r\n            map.off('moveend', this._reset, this);\r\n            map.off('resize',this._reset,this);\r\n        },\r\n\r\n        addTo: function (map) {\r\n\r\n            map.addLayer(this);\r\n            return this;\r\n        },\r\n\r\n        clearLayers: function() {\r\n\r\n            this._latlngMarkers = null;\r\n            this._markers = null;\r\n            this._redraw(true);\r\n        },\r\n\r\n        _addMarker: function(marker,latlng,isDisplaying) {\r\n\r\n            var self = this;\r\n            //Needed for pop-up & tooltip to work.\r\n            marker._map = self._map;\r\n\r\n            //_markers contains Points of markers currently displaying on map\r\n            if (!self._markers) self._markers = new rbush();\r\n\r\n            //_latlngMarkers contains Lat\\Long coordinates of all markers in layer.\r\n            if (!self._latlngMarkers) {\r\n                self._latlngMarkers = new rbush();\r\n                self._latlngMarkers.dirty=0;\r\n                self._latlngMarkers.total=0;\r\n            }\r\n\r\n            L.Util.stamp(marker);\r\n\r\n            var pointPos = self._map.latLngToContainerPoint(latlng);\r\n            var iconSize = marker.options.icon.options.iconSize;\r\n\r\n            var adj_x = iconSize[0]/2;\r\n            var adj_y = iconSize[1]/2;\r\n            var ret = [({\r\n                minX: (pointPos.x - adj_x),\r\n                minY: (pointPos.y - adj_y),\r\n                maxX: (pointPos.x + adj_x),\r\n                maxY: (pointPos.y + adj_y),\r\n                data: marker\r\n            }),({\r\n                minX: latlng.lng,\r\n                minY: latlng.lat,\r\n                maxX: latlng.lng,\r\n                maxY: latlng.lat,\r\n                data: marker\r\n            })];\r\n\r\n            self._latlngMarkers.dirty++;\r\n            self._latlngMarkers.total++;\r\n\r\n            //Only draw if we are on map\r\n            if(isDisplaying===true) self._drawMarker(marker, pointPos);\r\n\r\n            return ret;\r\n        },\r\n\r\n        _drawMarker: function (marker, pointPos) {\r\n\r\n            var self = this;\r\n\r\n            if (!this._imageLookup) this._imageLookup = {};\r\n            if (!pointPos) {\r\n\r\n                pointPos = self._map.latLngToContainerPoint(marker.getLatLng());\r\n            }\r\n\r\n            var iconUrl = marker.options.icon.options.iconUrl;\r\n\r\n            if (marker.canvas_img) {\r\n\r\n                self._drawImage(marker, pointPos);\r\n            }\r\n            else {\r\n\r\n                if(self._imageLookup[iconUrl]) {\r\n\r\n                    marker.canvas_img = self._imageLookup[iconUrl][0];\r\n\r\n                    if (self._imageLookup[iconUrl][1] ===false) {\r\n\r\n                        self._imageLookup[iconUrl][2].push([marker,pointPos]);\r\n                    }\r\n                    else {\r\n\r\n                        self._drawImage(marker,pointPos);\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    var i = new Image();\r\n                    i.src = iconUrl;\r\n                    marker.canvas_img = i;\r\n\r\n                    //Image,isLoaded,marker\\pointPos ref\r\n                    self._imageLookup[iconUrl] = [i, false, [[marker, pointPos]]];\r\n\r\n                    i.onload = function() {\r\n\r\n                        self._imageLookup[iconUrl][1] = true;\r\n                        self._imageLookup[iconUrl][2].forEach(function (e) {\r\n\r\n                            self._drawImage(e[0],e[1]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _drawImage: function (marker, pointPos) {\r\n\r\n            var options = marker.options.icon.options;\r\n\r\n            this._context.drawImage(\r\n                marker.canvas_img,\r\n                pointPos.x - options.iconAnchor[0],\r\n                pointPos.y - options.iconAnchor[1],\r\n                options.iconSize[0],\r\n                options.iconSize[1]\r\n            );\r\n        },\r\n\r\n        _reset: function () {\r\n\r\n            var topLeft = this._map.containerPointToLayerPoint([0, 0]);\r\n            L.DomUtil.setPosition(this._canvas, topLeft);\r\n\r\n            var size = this._map.getSize();\r\n\r\n            this._canvas.width = size.x;\r\n            this._canvas.height = size.y;\r\n\r\n            this._redraw();\r\n        },\r\n\r\n        _redraw: function (clear) {\r\n\r\n            var self = this;\r\n\r\n            if (clear) this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n            if (!this._map || !this._latlngMarkers) return;\r\n\r\n            var tmp = [];\r\n\r\n            //If we are 10% individual inserts\\removals, reconstruct lookup for efficiency\r\n            if (self._latlngMarkers.dirty/self._latlngMarkers.total >= .1) {\r\n\r\n                self._latlngMarkers.all().forEach(function(e) {\r\n\r\n                    tmp.push(e);\r\n                });\r\n\r\n                self._latlngMarkers.clear();\r\n                self._latlngMarkers.load(tmp);\r\n                self._latlngMarkers.dirty=0;\r\n                tmp = [];\r\n            }\r\n\r\n            var mapBounds = self._map.getBounds();\r\n\r\n            //Only re-draw what we are showing on the map.\r\n\r\n            var mapBoxCoords = {\r\n\r\n                minX: mapBounds.getWest(),\r\n                minY: mapBounds.getSouth(),\r\n                maxX: mapBounds.getEast(),\r\n                maxY: mapBounds.getNorth(),\r\n            };\r\n\r\n            self._latlngMarkers.search(mapBoxCoords).forEach(function (e) {\r\n\r\n                //Readjust Point Map\r\n                var pointPos = self._map.latLngToContainerPoint(e.data.getLatLng());\r\n\r\n                var iconSize = e.data.options.icon.options.iconSize;\r\n                var adj_x = iconSize[0]/2;\r\n                var adj_y = iconSize[1]/2;\r\n\r\n                var newCoords = {\r\n                    minX: (pointPos.x - adj_x),\r\n                    minY: (pointPos.y - adj_y),\r\n                    maxX: (pointPos.x + adj_x),\r\n                    maxY: (pointPos.y + adj_y),\r\n                    data: e.data\r\n                }\r\n\r\n                tmp.push(newCoords);\r\n\r\n                //Redraw points\r\n                self._drawMarker(e.data, pointPos);\r\n            });\r\n\r\n            //Clear rBush & Bulk Load for performance\r\n            this._markers.clear();\r\n            this._markers.load(tmp);\r\n        },\r\n\r\n        _initCanvas: function () {\r\n\r\n            this._canvas = L.DomUtil.create('canvas', 'leaflet-canvas-icon-layer leaflet-layer');\r\n            var originProp = L.DomUtil.testProp(['transformOrigin', 'WebkitTransformOrigin', 'msTransformOrigin']);\r\n            this._canvas.style[originProp] = '50% 50%';\r\n\r\n            var size = this._map.getSize();\r\n            this._canvas.width = size.x;\r\n            this._canvas.height = size.y;\r\n\r\n            this._context = this._canvas.getContext('2d');\r\n\r\n            var animated = this._map.options.zoomAnimation && L.Browser.any3d;\r\n            L.DomUtil.addClass(this._canvas, 'leaflet-zoom-' + (animated ? 'animated' : 'hide'));\r\n        },\r\n\r\n        addOnClickListener: function (listener) {\r\n            this._onClickListeners.push(listener);\r\n        },\r\n\r\n        addOnHoverListener: function (listener) {\r\n            this._onHoverListeners.push(listener);\r\n        },\r\n\r\n        _executeListeners: function (event) {\r\n\r\n            if (!this._markers) return;\r\n\r\n            var me = this;\r\n            var x = event.containerPoint.x;\r\n            var y = event.containerPoint.y;\r\n\r\n            if(me._openToolTip) {\r\n\r\n                me._openToolTip.closeTooltip();\r\n                delete me._openToolTip;\r\n            }\r\n\r\n            var ret = this._markers.search({ minX: x, minY: y, maxX: x, maxY: y });\r\n\r\n            if (ret && ret.length > 0) {\r\n\r\n                me._map._container.style.cursor=\"pointer\";\r\n\r\n                if (event.type===\"click\") {\r\n\r\n                    var hasPopup = ret[0].data.getPopup();\r\n                    if(hasPopup) ret[0].data.openPopup();\r\n\r\n                    me._onClickListeners.forEach(function (listener) { listener(event, ret); });\r\n                }\r\n\r\n                if (event.type===\"mousemove\") {\r\n                    var hasTooltip = ret[0].data.getTooltip();\r\n                    if(hasTooltip) {\r\n                        me._openToolTip = ret[0].data;\r\n                        ret[0].data.openTooltip();\r\n                    }\r\n\r\n                    me._onHoverListeners.forEach(function (listener) { listener(event, ret); });\r\n                }\r\n            }\r\n            else {\r\n\r\n                me._map._container.style.cursor=\"\";\r\n            }\r\n        }\r\n    });\r\n\r\n    L.canvasIconLayer = function (options) {\r\n        return new CanvasIconLayer(options);\r\n    };\r\n};\r\n\r\nmodule.exports = layerFactory;\r\n"],"sourceRoot":""}